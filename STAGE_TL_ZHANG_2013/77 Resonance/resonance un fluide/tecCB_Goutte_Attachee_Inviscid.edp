		verbosity = 0;

		// Polynome de Legendre en cos(t)
	  
		real[int] PLR(12);
		include "Legendre_Coefs.txt"


	        func real PL(int n, real t)
		{
		  if (n==0)
		  { 
		      return 1;
		  }
		  else if (n==1)
		  {
		      return cos(pi-t);
		  }
		}

		func real PL2(real t)
		{		 
		    //  return (2.*2-1.)/2*cos(pi-t)*PL(1,t)-(2-1)/2*PL(0,t); 
			return 1./2*(3*(cos(pi-t))^2-1);
		}
		
		func real PL3(real t)
		{		 
		      //return (2.*3-1.)/3*cos(pi-t)*PL2(t)-(3-1)/3*PL(1,t); 
			return 1./2*(5*(cos(pi-t))^3-3*cos(pi-t));
		}
		  func real PL4(real t)
		{		 
		      //return (2.*4-1.)/4*cos(pi-t)*PL3(t)-(4-1)/4*PL2(t); 
			return  1./8*(35*(cos(pi-t))^4-30*(cos(pi-t))^2+3);
		}
		  func real PL5(real t)
		{		 
		      //return (2.*5-1.)/5*cos(pi-t)*PL4(t)-(5-1)/5*PL3(t); 
			return  1./8*(63*(cos(pi-t))^5-70*(cos(pi-t))^3+15*cos(pi-t));
		}
		  func real PL6(real t)
		{		 
		      //return (2.*6-1.)/6*cos(pi-t)*PL5(t)-(6-1)/6*PL4(t); 
			return  1./16*(231*(cos(pi-t))^6-315*(cos(pi-t))^4+105*(cos(pi-t))^2-5);
		}
		 func real PL7(real t)
		{		 
		     // return (2.*7-1.)/7*cos(pi-t)*PL6(t)-(7-1)/7*PL5(t); 
			return  1./16*(429*(cos(pi-t))^7-693*(cos(pi-t))^5+315*(cos(pi-t))^3-35*cos(pi-t));
		}		
		 func real PL8(real t)
		{		 
		     // return (2.*8-1.)/8*cos(pi-t)*PL7(t)-(8-1)/8*PL6(t); 
			return  1./128*(6435*(cos(pi-t))^8-12012*(cos(pi-t))^6+6930*(cos(pi-t))^4-1260*(cos(pi-t))^2+35);
		}
	        func real PL9(real t)
		{		 
		      //return (2.*9-1.)/9*cos(pi-t)*PL8(t)-(9-1)/9*PL7(t); 
			return  1./128*(12155*(cos(pi-t))^9-25740*(cos(pi-t))^7+18018*(cos(pi-t))^5-4620*(cos(pi-t))^3+315*cos(pi-t));
		}
		 func real PL10(real t)
		{		 
		     // return (2.*10-1.)/10*cos(pi-t)*PL9(t)-(10-1)/10*PL8(t); 
			return  1./256*(46189*(cos(pi-t))^10-109395*(cos(pi-t))^8+90090*(cos(pi-t))^6-30030*(cos(pi-t))^4+3465*(cos(pi-t))^2-63);
		}
		 func real PL11(real t)
		{		 
		      return (2.*11-1.)/11*cos(pi-t)*PL10(t)-(11-1)/11*PL9(t); 
		}
		 func real PL12(real t)
		{		 
		      return (2.*12-1.)/12*cos(pi-t)*PL11(t)-(12-1)/12*PL10(t); 
		}
		func real PL13(real t)
		{		 
		      return (2.*13-1.)/13*cos(pi-t)*PL12(t)-(13-1)/13*PL11(t); 
		}
	

macro RR(t) 
(aa0*PL(0,t)+aa1*PL(1,t)+aa2*PL2(t)+aa3*PL3(t)+aa4*PL4(t)+aa5*PL5(t)+aa6*PL6(t)+aa7*PL7(t)+aa8*PL8(t)+aa9*PL9(t)+aa10*PL10(t))
//






                border BulleComplete(t=0,pi)
    {x=(aa0*PL(0,t)+aa1*PL(1,t)+aa2*PL2(t)+aa3*PL3(t)+aa4*PL4(t)+aa5*PL5(t)+aa6*PL6(t)+aa7*PL7(t)+aa8*PL8(t)+aa9*PL9(t)+aa10*PL10(t))*sin(t);
     y=(aa0*PL(0,t)+aa1*PL(1,t)+aa2*PL2(t)+aa3*PL3(t)+aa4*PL4(t)+aa5*PL5(t)+aa6*PL6(t)+aa7*PL7(t)+aa8*PL8(t)+aa9*PL9(t)+aa10*PL10(t))*cos(t);
				    label=2;};
//		border axe(t=-aa0,aa0){x=0;y=t;label=1;};



	mesh Th=readmesh("MeshBulle.msh");
	fespace Xh(Th,P2);
	fespace Mh(Th,P1);
	fespace XhxMhxMh(Th,[P2,P1,P1]);
        XhxMhxMh<complex> [phi,p,eta];
        Xh utr,uti;
	Mh ptr,pti;
        Mh xx,yy;
        xx=x;	
        yy=y;
	int N;
        real freqR,freqI;
/* // Premiere methode : lecture dans un fichier défini
	{
		ifstream fich("Eigen0adj-1R10v4.txt");
		fich >> phi[];
		fich >> N;
		fich >> freqR;
		fich >> freqI;
	}
*/
// Seconde methode : passage du fichier en argument
// usage : Frefem++ tecCB_Goutte_Attachee_Inviscid.edp < "nom du fichier"	
        {
		cin >> phi[];
		cin >> N;
		cin >> freqR;
		cin >> freqI;
	}


// 

cout << "FREQUENCE DU MODE : " << freqR << " + i " << freqI << endl;

// RENORMALISATION :
//phi[] = 1/(eta(0,1))*phi[];





	XhxMhxMh[phipr,ppr,etar]=[real(phi),real(p),real(eta)];
	XhxMhxMh[phipi,ppi,etai]=[imag(phi),imag(p),imag(eta)];
	utr=phipr;
	uti=phipi;
	ptr=ppr;
	pti=ppi;
	Xh ur = dx(phipr);
	Xh ui = dx(phipi);
	Xh vr = dy(phipr);
	Xh vi = dy(phipr);



	
// POUR AFFICHER LES CHAMPS phi et P	
	
	plot(Th,wait=1);
	plot(phipr,cmm="Eigen  Vector of sloshing problem : real(phi)"  ,wait=1,value=1);
	plot(phipi,cmm="Eigen  Vector of sloshing problem : imag(phi)"  ,wait=1,value=1);
//	plot(ui,cmm="Eigen  Vector of sloshing problem : imag(u)"  ,wait=1,value=1);
//	plot(vi,cmm="Eigen  Vector of sloshing problem : imag(v)"  ,wait=1,value=1);
	plot([ui,vi],cmm="Eigen  Vector of sloshing problem : velocity field"  ,wait=1,value=1);
	
	plot(ptr,cmm="Eigen  Vector of sloshing problem : real(p)"  ,wait=1,value=1);
	plot(pti,cmm="Eigen  Vector of sloshing problem : imag(p)"  ,wait=1,value=1);
	

// Pour construire un fichier contenant les valeurs de eta

	{ofstream ff("ETA_Goutte_Attachee_Inviscid.dat");
	real theta,XX,YY;
real thetatube = 3.05;
real ztop = RR(0);
real zbase = RR(thetatube)*cos(thetatube);
real rbase = RR(thetatube)*sin(thetatube);
	for (int ii=-500;ii<500;ii++)
	 {
	 theta = ii/500.*pi;
	 XX = RR(theta)*sin(theta)/rbase;
	 YY = (RR(theta)*cos(theta)-zbase)/rbase;
	 ff << theta << " " << real(eta(XX,YY)) << " " << imag(eta(XX,YY)) << endl;
	 }
	 }

// pour afficher avec gnuplot
	{
	ofstream fff("plot.gnu"); // fichier de commandes pour gnuplot
	fff << "plot \"ETA_Goutte_Attachee_Inviscid.dat\" w l,  \"ETA_Goutte_Attachee_Inviscid.dat\" u 1:3 w l "
	    << endl 
	    << "pause 15" << endl
            // les 3 lignes suivantes servent a creer un fichier format eps //
	    <<  "set term postscript" << endl   
	    <<  "set output \"ETA_Goutte_Attachee_Inviscid.eps\" " << endl
	    <<  "replot" << endl << "quit" << endl;
	 }   
	 exec("cat plot.gnu | gnuplot");
	       
	       
	        
		
	
// pour faire les figures avec tecplot



        ofstream champ2D("MODE_Goutte_Attachee_Inviscid.dat");
        {
                champ2D<< "VARIABLES= \"x\" , \"y\" , \"phir\",\"phii\",\"pr\",\"pi\" "<< endl;
                champ2D<< "ZONE F=FEPOINT,ET=TRIANGLE,N=" << Th.nv << ",E=" << Th.nt << endl;
       
                for (int j=0; j<Th.nv; j++)
                {
                        champ2D<< xx[][j] << " " << yy[][j]  << " " << phipr[][j] <<  " " <<
			          phipi[][j] << " "<< ptr[][j] << " " << pti[][j] << " "<<  endl;
                };

                for (int i=0; i<Th.nt; i++)
                {
                        champ2D<< Th[i][0]+1 << " " << Th[i][1]+1 << " " << Th[i][2]+1 << endl;
                };
	
	champ2D<< "TEXT T = <greek>w</greek><sub>r</sub>:" <<   freqI   << endl;
	champ2D<< "TEXT T = <greek>w</greek><sub>i</sub>:" <<   freqR << endl; 	
        }


